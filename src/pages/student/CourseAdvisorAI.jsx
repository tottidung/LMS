import React, { useEffect, useState } from 'react';
import { fetchSuggestedCourses } from '../../api/fakeSuggestionsApi';
import { useUser } from '@clerk/clerk-react';

const CourseAdvisorAI = () => {
  const { user } = useUser();

  const [suggestions, setSuggestions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [suggestion, setSuggestion] = useState('');
  const [formData, setFormData] = useState({
    level: '',
    goal: '',
    interest: '',
  });

  const OPENAI_API_KEY = 'sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'; // ‚ùóÔ∏èThay b·∫±ng kh√≥a th·∫≠t c·ªßa b·∫°n

  // Danh s√°ch kh√≥a h·ªçc demo cho AI g·ª£i √Ω
  const courseCatalog = [
    { title: 'L·∫≠p tr√¨nh Python c∆° b·∫£n', field: 'l·∫≠p tr√¨nh', level: 'm·ªõi b·∫Øt ƒë·∫ßu' },
    { title: 'Ph√¢n t√≠ch d·ªØ li·ªáu v·ªõi Excel', field: 'd·ªØ li·ªáu', level: 'm·ªõi b·∫Øt ƒë·∫ßu' },
    { title: 'Fullstack Web v·ªõi React & Node.js', field: 'web', level: 'trung b√¨nh' },
    { title: 'Machine Learning n√¢ng cao', field: 'AI', level: 'n√¢ng cao' },
    { title: 'Thi·∫øt k·∫ø UI/UX cho ng∆∞·ªùi m·ªõi', field: 'thi·∫øt k·∫ø', level: 'm·ªõi b·∫Øt ƒë·∫ßu' },
    { title: 'K·ªπ nƒÉng giao ti·∫øp chuy√™n nghi·ªáp', field: 'k·ªπ nƒÉng m·ªÅm', level: 'm·ªçi c·∫•p' },
  ];

  // üîπ G·ªçi API gi·∫£ l·∫≠p khi load trang
  useEffect(() => {
    const loadSuggestions = async () => {
      if (user?.id) {
        setLoading(true);
        const data = await fetchSuggestedCourses(user.id);
        setSuggestions(data);
        setLoading(false);
      }
    };
    loadSuggestions();
  }, [user]);

  // üîπ X·ª≠ l√Ω thay ƒë·ªïi form
  const handleChange = (e) => {
    setFormData(prev => ({
      ...prev,
      [e.target.name]: e.target.value,
    }));
  };

  // üîπ G·ª≠i form cho OpenAI
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setSuggestion('');

    const prompt = `
T√¥i l√† m·ªôt tr·ª£ l√Ω gi√°o d·ª•c AI. D∆∞·ªõi ƒë√¢y l√† danh s√°ch kh√≥a h·ªçc:
${courseCatalog.map(c => `- ${c.title} (${c.field}, ${c.level})`).join('\n')}

D·ª±a tr√™n th√¥ng tin sau:
- Tr√¨nh ƒë·ªô: ${formData.level}
- M·ª•c ti√™u h·ªçc: ${formData.goal}
- Lƒ©nh v·ª±c quan t√¢m: ${formData.interest}

H√£y g·ª£i √Ω 2-3 kh√≥a h·ªçc ph√π h·ª£p nh·∫•t t·ª´ danh s√°ch, gi·∫£i th√≠ch v√¨ sao ch·ªçn ch√∫ng.
Tr·∫£ l·ªùi ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu b·∫±ng ti·∫øng Vi·ªát.
`;

    try {
      const res = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${OPENAI_API_KEY}`,
        },
        body: JSON.stringify({
          model: 'gpt-3.5-turbo',
          messages: [{ role: 'user', content: prompt }],
          temperature: 0.7,
        }),
      });

      const data = await res.json();
      const reply = data.choices?.[0]?.message?.content || 'Xin l·ªói, t√¥i kh√¥ng t√¨m ƒë∆∞·ª£c kh√≥a ph√π h·ª£p.';
      setSuggestion(reply);
    } catch (err) {
      console.error(err);
      setSuggestion('L·ªói x·∫£y ra khi k·∫øt n·ªëi AI.');
    }

    setLoading(false);
  };

  return (
    <div className="max-w-xl mx-auto p-6 border rounded shadow mt-10 bg-white">
      <h2 className="text-2xl font-bold mb-4">üéì G·ª£i √Ω kh√≥a h·ªçc b·∫±ng AI</h2>

      {/* üîπ G·ª£i √Ω m·∫∑c ƒë·ªãnh t·ª´ mock API */}
      {loading ? (
        <p className="mt-4 text-gray-500 italic">ƒêang t·∫£i g·ª£i √Ω t·ª´ AI...</p>
      ) : (
        <>
          {suggestions.length > 0 && (
            <ul className="mt-4 space-y-4">
              {suggestions.map((course) => (
                <li key={course.id} className="p-4 bg-gray-100 border rounded">
                  <h3 className="font-semibold">{course.title}</h3>
                  <p className="text-sm text-gray-600">{course.description}</p>
                </li>
              ))}
            </ul>
          )}
        </>
      )}

      {/* üîπ Form AI */}
      <form onSubmit={handleSubmit} className="space-y-4 mt-6">
        <div>
          <label className="block font-medium">1. Tr√¨nh ƒë·ªô hi·ªán t·∫°i c·ªßa b·∫°n?</label>
          <select
            name="level"
            value={formData.level}
            onChange={handleChange}
            className="w-full border px-3 py-2 rounded mt-1"
            required
          >
            <option value="">-- Ch·ªçn tr√¨nh ƒë·ªô --</option>
            <option value="m·ªõi b·∫Øt ƒë·∫ßu">M·ªõi b·∫Øt ƒë·∫ßu</option>
            <option value="trung b√¨nh">Trung b√¨nh</option>
            <option value="n√¢ng cao">N√¢ng cao</option>
          </select>
        </div>

        <div>
          <label className="block font-medium">2. M·ª•c ti√™u h·ªçc c·ªßa b·∫°n l√† g√¨?</label>
          <input
            name="goal"
            value={formData.goal}
            onChange={handleChange}
            placeholder="V√≠ d·ª•: T√¨m vi·ªác, n√¢ng cao k·ªπ nƒÉng..."
            className="w-full border px-3 py-2 rounded mt-1"
            required
          />
        </div>

        <div>
          <label className="block font-medium">3. B·∫°n quan t√¢m lƒ©nh v·ª±c n√†o?</label>
          <input
            name="interest"
            value={formData.interest}
            onChange={handleChange}
            placeholder="V√≠ d·ª•: l·∫≠p tr√¨nh, thi·∫øt k·∫ø, d·ªØ li·ªáu..."
            className="w-full border px-3 py-2 rounded mt-1"
            required
          />
        </div>

        <button
          type="submit"
          className="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700 transition"
        >
          G·ª£i √Ω ngay
        </button>
      </form>

      {/* üîπ K·∫øt qu·∫£ g·ª£i √Ω c·ªßa AI */}
      {suggestion && (
        <div className="mt-6 bg-gray-100 p-4 rounded border text-gray-800 whitespace-pre-line">
          {suggestion}
        </div>
      )}
    </div>
  );
};

export default CourseAdvisorAI;
